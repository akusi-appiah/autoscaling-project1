AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Apache Web Server setup with ALB, private/public subnets,
  NAT Gateway, and scaling based on CPU utilization.

######################################################
# Parameters
######################################################
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet (ALB, NAT Gateway)

  PrivateSubnetCidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the private subnet (EC2 instances)

  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type

  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for EC2 instance (Amazon Linux 2 preferred)

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair name (for SSH access)

######################################################
# VPC and Networking
######################################################
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: AutoScalingVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

######################################################
# Security Groups
######################################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG - allow HTTP from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 SG - allow HTTP from ALB only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# ######################################################
# # Launch Template
# ######################################################
#   WebLaunchTemplate:
#     Type: AWS::EC2::LaunchTemplate
#     Properties:
#       LaunchTemplateData:
#         ImageId: !Ref AmiId
#         InstanceType: !Ref InstanceType
#         KeyName: !Ref KeyName
#         SecurityGroupIds:
#           - !Ref InstanceSecurityGroup
#         UserData:
#           Fn::Base64: !Sub |
#             #!/bin/bash
#             yum update -y
#             yum install -y httpd stress
#             systemctl start httpd
#             systemctl enable httpd
#             INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
#             IP_ADDR=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
#             echo "<html><body><h1>Hello from ${IP_ADDR} / ${INSTANCE_ID}</h1><button onclick=\"fetch('/stress')\">Stress CPU</button><script>fetch('/stress')</script></body></html>" > /var/www/html/index.html
#             echo -e "#!/bin/bash\nstress --cpu 1 --timeout 60" > /var/www/html/stress
#             chmod +x /var/www/html/stress
#             echo "AddHandler cgi-script .sh" >> /etc/httpd/conf/httpd.conf
#             systemctl restart httpd

# ######################################################
# # Load Balancer & Target Group
# ######################################################
#   WebTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       VpcId: !Ref VPC
#       Port: 80
#       Protocol: HTTP
#       TargetType: instance
#       HealthCheckPath: /
#       Matcher:
#         HttpCode: 200

#   WebALB:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       Name: web-alb
#       Subnets:
#         - !Ref PublicSubnet
#       SecurityGroups:
#         - !Ref ALBSecurityGroup
#       Scheme: internet-facing
#       LoadBalancerAttributes:
#         - Key: idle_timeout.timeout_seconds
#           Value: '60'

#   WebListener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       LoadBalancerArn: !Ref WebALB
#       Port: 80
#       Protocol: HTTP
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref WebTargetGroup

# ######################################################
# # Auto Scaling Group & Policies
# ######################################################
#   WebAutoScalingGroup:
#     Type: AWS::AutoScaling::AutoScalingGroup
#     Properties:
#       VPCZoneIdentifier:
#         - !Ref PrivateSubnet
#       LaunchTemplate:
#         LaunchTemplateId: !Ref WebLaunchTemplate
#         Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
#       MinSize: '1'
#       MaxSize: '3'
#       DesiredCapacity: '1'
#       TargetGroupARNs:
#         - !Ref WebTargetGroup
#       HealthCheckType: EC2
#       HealthCheckGracePeriod: 300

#   CPUAlarmHigh:
#     Type: AWS::CloudWatch::Alarm
#     Properties:
#       AlarmDescription: Scale out if CPU > 50%
#       Namespace: AWS/EC2
#       MetricName: CPUUtilization
#       Dimensions:
#         - Name: AutoScalingGroupName
#           Value: !Ref WebAutoScalingGroup
#       Statistic: Average
#       Period: 60
#       EvaluationPeriods: 2
#       Threshold: 50
#       ComparisonOperator: GreaterThanThreshold
#       AlarmActions:
#         - !Ref ScaleOutPolicy

#   ScaleOutPolicy:
#     Type: AWS::AutoScaling::ScalingPolicy
#     Properties:
#       AutoScalingGroupName: !Ref WebAutoScalingGroup
#       PolicyType: SimpleScaling
#       AdjustmentType: ChangeInCapacity
#       ScalingAdjustment: 1
#       Cooldown: 300
