AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Auto Scaling Apache Web Server setup with ALB, private/public subnets,
  NAT Gateway, and scaling based on CPU utilization.

######################################################
# Parameters
######################################################
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/20
    Description: CIDR block for the VPC

  PublicSubnetCidr1:
    Type: String
    Default: 10.0.0.0/22
    Description: CIDR block for the public subnet (ALB, NAT Gateway)

  PublicSubnetCidr2:
    Type: String
    Default: 10.0.4.0/22
    Description: CIDR block for the public subnet (ALB, NAT Gateway)

  PrivateSubnetCidr1:
    Type: String
    Default: 10.0.8.0/22
    Description: CIDR block for the private subnet (EC2 instances)

  PrivateSubnetCidr2:
    Type: String
    Default: 10.0.12.0/22
    Description: CIDR block for the private subnet (EC2 instances)

  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type

  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI from SSM Parameter Store

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair name (for SSH access)

######################################################
# VPC and Networking
######################################################
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: AutoScalingVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NATGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NATGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  ######################################################
  # Security Groups
  ######################################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG - allow HTTP from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 SG - allow HTTP from ALB only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # ######################################################
  # # Launch Template
  # ######################################################
  # WebLaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateData:
  #       ImageId: !Ref AmiId
  #       InstanceType: !Ref InstanceType
  #       KeyName: !Ref KeyName
  #       SecurityGroupIds:
  #         - !Ref InstanceSecurityGroup
  #       UserData:
  #         Fn::Base64: |
  #           #!/bin/bash
  #           yum update -y
  #           yum install -y httpd stress
  #           systemctl start httpd
  #           systemctl enable httpd
  #           INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
  #           IP_ADDR=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
  #           echo "<html><body><h1>Hello from $${IP_ADDR} / $${INSTANCE_ID}</h1><button onclick=\"fetch('/cgi-bin/stress.sh')\">Stress CPU</button></body></html>" > /var/www/html/index.html
  #           mkdir -p /var/www/cgi-bin
  #           echo -e "#!/bin/bash\nstress --cpu 1 --timeout 60" > /var/www/cgi-bin/stress.sh
  #           chmod +x /var/www/cgi-bin/stress.sh
  #           echo "ScriptAlias /cgi-bin/ \"/var/www/cgi-bin/\"" >> /etc/httpd/conf/httpd.conf
  #           echo -e "<Directory \"/var/www/cgi-bin\">\nAllowOverride None\nOptions +ExecCGI\nRequire all granted\nAddHandler cgi-script .sh\n</Directory>" >> /etc/httpd/conf/httpd.conf
  #           systemctl restart httpd

  # ######################################################
  # # Load Balancer & Target Group
  # ######################################################
  # WebTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     VpcId: !Ref VPC
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: instance
  #     HealthCheckPath: /
  #     Matcher:
  #       HttpCode: 200

  # WebALB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: web-alb
  #     Subnets:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #     SecurityGroups:
  #       - !Ref ALBSecurityGroup
  #     Scheme: internet-facing
  #     LoadBalancerAttributes:
  #       - Key: idle_timeout.timeout_seconds
  #         Value: "60"

  # WebListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref WebALB
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref WebTargetGroup

  # ######################################################
  # # Auto Scaling Group & Policies
  # ######################################################
  # WebAutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     VPCZoneIdentifier:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref WebLaunchTemplate
  #       Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
  #     MinSize: "1"
  #     MaxSize: "3"
  #     DesiredCapacity: "1"
  #     TargetGroupARNs:
  #       - !Ref WebTargetGroup
  #     HealthCheckType: EC2
  #     HealthCheckGracePeriod: 60

  # ScaleOutPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AutoScalingGroupName: !Ref WebAutoScalingGroup
  #     PolicyType: SimpleScaling
  #     AdjustmentType: ChangeInCapacity
  #     ScalingAdjustment: 1
  #     Cooldown: 300

  # CPUAlarmHigh:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: Scale out if CPU > 50%
  #     Namespace: AWS/EC2
  #     MetricName: CPUUtilization
  #     Dimensions:
  #       - Name: AutoScalingGroupName
  #         Value: !Ref WebAutoScalingGroup
  #     Statistic: Average
  #     Period: 60
  #     EvaluationPeriods: 2
  #     Threshold: 50
  #     ComparisonOperator: GreaterThanThreshold
  #     AlarmActions:
  #       - !Ref ScaleOutPolicy
